{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Personal Programming Notes This is a library of notes related to different programming languages and methods.","title":"Home"},{"location":"#personal-programming-notes","text":"This is a library of notes related to different programming languages and methods.","title":"Personal Programming Notes"},{"location":"gen/git-notes/","text":"Git && Github Add acount # Enable only for current repo git config credential.helper store git config user.name git config user.email # Enable Global git config --global credential.helper store git config --global user.name git config --global user.email git add . git commit -m \"update notes\" git push origin git subtree push --prefix site origin gh-pages # Or all together git add . && git commit -m \"notes\" && git push origin && git subtree push --prefix site origin gh-pages","title":"Git"},{"location":"gen/git-notes/#git-github","text":"","title":"Git &amp;&amp; Github"},{"location":"gen/git-notes/#add-acount","text":"# Enable only for current repo git config credential.helper store git config user.name git config user.email # Enable Global git config --global credential.helper store git config --global user.name git config --global user.email git add . git commit -m \"update notes\" git push origin git subtree push --prefix site origin gh-pages # Or all together git add . && git commit -m \"notes\" && git push origin && git subtree push --prefix site origin gh-pages","title":"Add acount"},{"location":"py/py-general/","text":"Python Programming Notes OS calls OS System import os os . system ( \"ls -l\" ) import os stream = os . popen ( \"ls -la\" ) Subprocess import subprocess subprocess . run ([ \"ls\" , \"-l\" ]) Pre 3.5 import subprocess subprocess . call ([ \"ls\" , \"-l\" ]) Useful way to call OS commands def my_func (): cmd = \"ls -l *\" sp = subprocess . popen ( cmd , shell = True , stdout = subprocess . PIPE , stderr = subprocess . PIPE , universal_newlines = True ) out , err = sp . communicate () rc = sp . wait () print ( 'Return Code:' , rc , ' \\n ' ) print ( 'output is: \\n ' , out ) print ( 'error is: \\n ' , err )","title":"General"},{"location":"py/py-general/#python-programming-notes","text":"","title":"Python Programming Notes"},{"location":"py/py-general/#os-calls","text":"","title":"OS calls"},{"location":"py/py-general/#os-system","text":"import os os . system ( \"ls -l\" ) import os stream = os . popen ( \"ls -la\" )","title":"OS System"},{"location":"py/py-general/#subprocess","text":"import subprocess subprocess . run ([ \"ls\" , \"-l\" ]) Pre 3.5 import subprocess subprocess . call ([ \"ls\" , \"-l\" ])","title":"Subprocess"},{"location":"py/py-general/#useful-way-to-call-os-commands","text":"def my_func (): cmd = \"ls -l *\" sp = subprocess . popen ( cmd , shell = True , stdout = subprocess . PIPE , stderr = subprocess . PIPE , universal_newlines = True ) out , err = sp . communicate () rc = sp . wait () print ( 'Return Code:' , rc , ' \\n ' ) print ( 'output is: \\n ' , out ) print ( 'error is: \\n ' , err )","title":"Useful way to call OS commands"}]}